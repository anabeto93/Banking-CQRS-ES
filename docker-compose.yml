version: '3.7'

services:
  account:
    build:
      args:
        user: ${USER}
      context: ./accounts
      dockerfile: Dockerfile
    image: banking-account
    container_name: banking-account
    restart: unless-stopped
    tty: true
    ports:
      - 8080:8080
    depends_on: 
      - discovery
    environment: 
      EUREKA_SERVER: http://discovery:8761/eureka

  customer:
    build:
      args:
        user: ${USER}
      context: ./customers
      dockerfile: Dockerfile
    image: banking-customer
    container_name: banking-customer
    restart: unless-stopped
    tty: true
    ports:
      - 8081:8080
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/${DB_DATABASE}?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      EUREKA_SERVER: http://discovery:8761/eureka
    depends_on: 
      - discovery

  statement:
    build:
      args:
        user: ${USER}
      context: ./statements
      dockerfile: Dockerfile
    image: banking-statement
    container_name: banking-statement
    restart: unless-stopped
    tty: true
    ports:
      - 8082:8080
    depends_on: 
      - discovery
    environment: 
      EUREKA_SERVER: http://discovery:8761/eureka

  db:
    image: mysql:5.7
    container_name: banking-db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - banking-customers-data:/var/lib/mysql
    networks:
      - banking-backend

  mongo:
    image: mongo:latest
    container_name: banking-mongo
    restart: unless-stopped
    tty: true
    environment: 
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - banking-statements-data:/data/db
    networks:
      - banking-backend

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: banking-rabbitmq
    restart: unless-stopped
    tty: true
    volumes:
      - ./.data/rabbitmq/etc/:/etc/rabbitmq/
      - banking-broker-data:/var/lib/rabbitmq/
      - ./.data/rabbitmq/logs/:/var/log/rabbitmq/
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - banking-backend

  nginx:
    image: nginx:1.17-alpine
    container_name: banking-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./accounts:/var/sites/accounts
      - ./customers:/var/sites/customers
      - ./statements:/var/sites/statements
      - ./docker/nginx/configs:/etc/nginx/conf.d
      - ./docker/nginx/certs/accounts:/etc/nginx/ssl/accounts
      - ./docker/nginx/certs/customers:/etc/nginx/ssl/customers
      - ./docker/nginx/certs/statements:/etc/nginx/ssl/statements
    depends_on: 
      - account
      - customer
      - statement
    networks:
      - banking-backend
      - default

  discovery:
    image: discovery:0.0.1-SNAPSHOT
    ports:
      - 8761:8761
    networks:
      - banking-backend

  axxon:
    image: axoniq/axonserver
    ports:
      - 8024:8024
      - 8124:8124
    networks:
      - banking-backend


volumes:
  banking-customers-data:
  banking-statements-data:
  banking-accounts-data:
  banking-broker-data:

networks:
  banking-backend:
    driver: bridge
